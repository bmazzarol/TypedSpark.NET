== Parsed Logical Plan ==
Union
:- SubqueryAlias a
:  +- Relation[A,B,C] json
+- SubqueryAlias b
   +- Relation[A,B,C] json

== Analyzed Logical Plan ==
A: string, B: int, C: date
Union
:- SubqueryAlias a
:  +- Relation[A,B,C] json
+- Project [A AS A, B AS B, C AS C]
   +- SubqueryAlias b
      +- Relation[A,B,C] json

== Optimized Logical Plan ==
Union
:- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
:     +- FileScan json [A,B,C] Batched: false, DataFilters: [], Format: JSON, Location: InMemoryFileIndex[file:/{ProjectDirectory}..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<A:string,B:int,C:date>
+- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
      +- FileScan json [A,B,C] Batched: false, DataFilters: [], Format: JSON, Location: InMemoryFileIndex[file:/{ProjectDirectory}..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<A:string,B:int,C:date>

== Physical Plan ==
Union
:- InMemoryTableScan [A, B, C]
:     +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
:           +- FileScan json [A,B,C] Batched: false, DataFilters: [], Format: JSON, Location: InMemoryFileIndex[file:/{ProjectDirectory}..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<A:string,B:int,C:date>
+- InMemoryTableScan [A, B, C]
      +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
            +- FileScan json [A,B,C] Batched: false, DataFilters: [], Format: JSON, Location: InMemoryFileIndex[file:/{ProjectDirectory}..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<A:string,B:int,C:date>

struct<A:string,B:integer,C:date>

(top = 20)
+---+---+----------+
|A  |B  |C         |
+---+---+----------+
|1  |1  |0001-01-01|
|2  |2  |9999-12-31|
|1  |1  |0001-01-01|
|2  |2  |9999-12-31|
+---+---+----------+
