== Parsed Logical Plan ==
'Project ['a.A AS A1, 'b.A AS A2]
+- Join FullOuter, (B = B)
   :- SubqueryAlias a
   :  +- Relation [A,B,C] json
   +- SubqueryAlias b
      +- Relation [A,B,C] json

== Analyzed Logical Plan ==
A1: string, A2: string
Project [A AS A1, A AS A2]
+- Join FullOuter, (B = B)
   :- SubqueryAlias a
   :  +- Relation [A,B,C] json
   +- SubqueryAlias b
      +- Relation [A,B,C] json

== Optimized Logical Plan ==
Project [A AS A1, A AS A2]
+- Join FullOuter, (B = B)
   :- Project [A, B]
   :  +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
   +- Project [A, B]
      +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Project [A AS A1, A AS A2]
   +- SortMergeJoin [B], [B], FullOuter
      :- Sort [B ASC NULLS FIRST], false, 0
      :  +- Exchange hashpartitioning(B, 1), ENSURE_REQUIREMENTS, [id=]
      :     +- InMemoryTableScan [A, B]
      :           +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
      +- Sort [B ASC NULLS FIRST], false, 0
         +- Exchange hashpartitioning(B, 1), ENSURE_REQUIREMENTS, [id=]
            +- InMemoryTableScan [A, B]
                  +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)

struct<A1:string,A2:string>

(top = 20)
+---+---+
|A1 |A2 |
+---+---+
|1  |4  |
|2  |3  |
+---+---+
