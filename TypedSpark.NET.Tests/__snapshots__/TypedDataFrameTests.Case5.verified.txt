== Parsed Logical Plan ==
Intersect false
:- Relation [A,B,C] json
+- Relation [A,B,C] json

== Analyzed Logical Plan ==
A: string, B: int, C: date
Intersect false
:- Relation [A,B,C] json
+- Relation [A,B,C] json

== Optimized Logical Plan ==
Aggregate [A, B, C], [A, B, C]
+- Join LeftSemi, (((A <=> A) AND (B <=> B)) AND (C <=> C))
   :- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
   +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[A, B, C], functions=[], output=[A, B, C])
   +- Exchange hashpartitioning(A, B, C, 1), ENSURE_REQUIREMENTS, [id=]
      +- HashAggregate(keys=[A, B, C], functions=[], output=[A, B, C])
         +- BroadcastHashJoin [coalesce(A, ), isnull(A), coalesce(B, 0), isnull(B), coalesce(C, 1970-01-01), isnull(C)], [coalesce(A, ), isnull(A), coalesce(B, 0), isnull(B), coalesce(C, 1970-01-01), isnull(C)], LeftSemi, BuildRight, false
            :- InMemoryTableScan [A, B, C]
            :     +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)
            +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, date, true], 1970-01-01), isnull(input[2, date, true])),false), [id=]
               +- InMemoryTableScan [A, B, C]
                     +- InMemoryRelation [A, B, C], StorageLevel(disk, memory, deserialized, 1 replicas)

root
 |-- A: string (nullable = true)
 |-- B: integer (nullable = true)
 |-- C: date (nullable = true)


(top = 20)
+---+---+----------+
|A  |B  |C         |
+---+---+----------+
|2  |2  |9999-12-31|
+---+---+----------+
